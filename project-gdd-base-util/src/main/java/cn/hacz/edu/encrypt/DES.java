package cn.hacz.edu.encrypt;

import org.apache.commons.codec.binary.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;

/**
 * DES加密解密
 * 
 * @author lkw
 *
 */
public class DES {

	private final static byte[] iv = { 1, 2, 3, 4, 5, 6, 7, 8 };
	private final static String DESPKC = "DES/CBC/PKCS5Padding";
	private final static String DESTYPE = "DES";
	public final static String key = "asbapp!@";

	public static void main(String[] args) {
		try {
			System.out.println(decrypt("x0Gf516B3Yea23j+lOpaBBkYS3DzattgLDLXrvGsqX8H2CzsLXFeuv2JDyAIonC5UMyEUL28cBosG2WoyXQJyw=="));
			String s = decrypt(
					"");
			System.out.println(s);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * DES加密
	 * 
	 * @param data
	 *            加密数据
	 * @return
	 * @throws Exception
	 */
	public static String encrypt(String data) throws Exception {
		return encrypt(data, key);
	}

	/**
	 * 根据键值进行加密
	 * 
	 * @param data
	 * @param key
	 *            加密键byte数组
	 * @return
	 * @throws Exception
	 */
	public static String encrypt(String data, String key) throws Exception {
		byte[] bt = encrypt(Base64.encodeBase64(data.getBytes("UTF-8")), key.getBytes("UTF-8"));
		byte[] buf = Base64.encodeBase64String(bt).getBytes("UTF-8");
		// return Base64.encodeBase64String(bt);
		return new String(buf, "UTF8");
	}

	public static String decrypt(String data) throws IOException, Exception {
		return decrypt(data, key);
	}

	/**
	 * Description 根据键值进行解密
	 * 
	 * @param data
	 * @param key
	 *            加密键byte数组
	 * @return
	 * @throws IOException
	 * @throws Exception
	 */

	public static String decrypt(String data, String key) throws IOException, Exception {
		if (data == null)
			return null;
		byte[] bt = decrypt(Base64.decodeBase64(data), key.getBytes());
		byte[] buf = Base64.decodeBase64(bt);
		return new String(buf, "UTF8");
	}

	/**
	 * Description 根据键值进行加密
	 * 
	 * @param data
	 * @param key
	 *            加密键byte数组
	 * @return
	 * @throws Exception
	 */
	private static byte[] encrypt(byte[] data, byte[] key) throws Exception {
		IvParameterSpec zeroIv = new IvParameterSpec(iv);
		SecretKeySpec seckey = new SecretKeySpec(key, DESTYPE);
		Cipher cipher = Cipher.getInstance(DESPKC);
		cipher.init(Cipher.ENCRYPT_MODE, seckey, zeroIv);
		byte[] encryptedData = cipher.doFinal(data);
		return encryptedData;
	}

	/**
	 * Description 根据键值进行解密
	 * 
	 * @param data
	 * @param key
	 *            加密键byte数组
	 * @return
	 * @throws Exception
	 */
	private static byte[] decrypt(byte[] data, byte[] key) throws Exception {
		IvParameterSpec zeroIv = new IvParameterSpec(iv);
		SecretKeySpec seckey = new SecretKeySpec(key, DESTYPE);
		Cipher cipher = Cipher.getInstance(DESPKC);
		cipher.init(Cipher.DECRYPT_MODE, seckey, zeroIv);
		byte decryptedData[] = cipher.doFinal(data);
		return decryptedData;
	}

}
